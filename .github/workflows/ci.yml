name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - uses: pre-commit/action@v3.0.0

  # Make sure commit messages follow the conventional commits convention:
  # https://www.conventionalcommits.org
  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v5.3.1

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
          - "3.11"
        os:
          - windows-latest
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - uses: snok/install-poetry@v1.3.3
      - name: Install Dependencies
        run: poetry install
        shell: bash
      - name: Test with Pytest
        run: poetry run pytest --cov-report=xml
        shell: bash
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  release:
    runs-on: ubuntu-latest
    environment: release
    needs:
      - test
      - lint
      - commitlint

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Release
        uses: relekang/python-semantic-release@v7.34.6
        if: github.ref_name == 'main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pypi_token: ${{ secrets.PYPI_TOKEN }}
      - name: Test release
        uses: relekang/python-semantic-release@v7.34.6
        if: github.ref_name != 'main'
        with:
          additional_options: --noop

  pyinstaller-build:
    runs-on: windows-latest
    needs:
      - release
    steps:
      - uses: actions/checkout@v3
      - name: Bootstrap and create virtual environment
        run: .\bootstrap.ps1
        shell: powershell
      - name: Install Dependencies
        run: .venv/Scripts/poetry install --with=dev
        shell: powershell
      - name: Run PyInstaller
        run: .venv/Scripts/poetry run pyinstaller build_exe.spec
        shell: powershell
      - name: Upload windows executable to GitHub releases
        uses: actions/upload-artifact@v3
        with:
          name: yanga.windows-amd64.zip
          path: dist/yanga.exe
          if-no-files-found: error
